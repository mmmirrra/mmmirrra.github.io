---
layout: post
title:  "C: sample_operator.c"
date:   2024-02-14 09:00:00 +0900
categories: [C]
---

solution 'CPrjs'   
project 'Sample_Operator'   
   
### sourceFile list - .c   
#### main() sourceFile   
`sample_operator.c` : C practice project main function   
   
```c
/* 선행처리기 preprocessor* /
/* 파일 포함 : #include <파일명>, #include "파일명" */
/* 매크로 macro 상수 정의: #define 매크로명 자료
   매크로 macro 상수 정의 해제: #undef 매크로명
   매크로 macro 함수 정의: #define 매크로명(인수) (수식), #define 매크로명(인수, 인수) (수식)
   매크로 macro 함수 특징: 인자로 전달하는 변수의 자료형은 제한없음 */
/* 조건부 컴파일: #if, #else, #elif, #endif
   조건부 컴파일 특징: #if와 #elif 에는 컴파일 여부를 결정하는 조건문 필요. 
                      조건문은 선행처리과정에서 진위 여부를 판단할 수 있어야 함. 
                      조건문에는 변수 지정이나 함수 호출 불가하고, 주로 매크로 값을 사용함 */

#include <stdio.h>
#define PI 3.141592
#define TEL "o1o-1111-oooo"
#define AREA(x) (3.141592*(x)*(x))
#define Hap1(x,y) x+y
#define Hap2(x,y) ((x)+(y))
#define Gop1(x,y) x*y
#define Gop2(x,y) ((x)*(y))
#define CONDITION 1

#define _CRT_SECURE_NO_WARNINGS
/* 권장하지 않는 함수 사용에 대한 경고 메시지 무시 - scanf */
#pragma warning(disable : 6031)
#pragma warning(disable : 4996)

void main() {

	printf("Hello C 프로그래밍 \n");

	/* 매크로 macro 함수 정의 예제 */
	int h1, h2, g1, g2;
	h1 = 10 * Hap1(3, 4);
	h2 = 10 * Hap2(3, 4);
	g1 = Gop1(1 + 2, 3 + 4);
	g2 = Gop2(1 + 2, 3 + 4);
	printf("h1=%d, h2=%d\n", h1, h2);	// 출력결과 --> h1=34, h2=70
	printf("g1=%d, g2=%d\n", g1, g2);	// 출력결과 --> g1=11, g2=21

	/* 조건부 컴파일 예제 */
#if CONDITION
	printf("\n A 프로그램을 컴파일 \n");
#else
	printf("\n B 프로그램을 컴파일 \n");
#endif

	/* printf() 표준출력함수 예제 */
	char c = 'A';
	int i = 10, j = 20, k = 30;
	printf("간단한 출력 프로그램\n");		// 출력결과 --> 간단한 출력 프로그램
	printf("c=%c, c의 아스키 코드값은 %d\n", c, c);	// 출력결과 --> c=A, c의 아스키 코드값은 65
	printf("i=%d, j=%d, k=%d\n", i, j, k);		// 출력결과 --> i=10, j=20, k=30
	printf("%c\n", 'a');				// 문자형: 출력결과 --> a
	printf("%d\n", -123);				// 정수형 10진수: 출력결과 --> -123
	printf("%o\n", 123);				// 정수형 8진수: 출력결과 --> 173
	printf("%x\n", 123);				// 정수형 소문자 16진수: 출력결과 --> 7b
	printf("%X\n", 123);				// 정수형 대문자 16진수: 출력결과 --> 7B
	printf("%f\n", 123.456789);			// 실수형: 출력결과 --> 123.456789
	printf("%e\n", 123.456789);			// 지수형: 출력결과 --> 1.2345678e+02
	printf("%s\n", "abcdefg");			// 문자열형: 출력결과 --> abcdefg

	/* 출력양식 편집 예제 */
	printf("|%d|\n", 123);		// 숫자의 길이만큼 출력 폭이 자동 지정됨 : 출력결과 --> |123|
	printf("|%5d|\n", 123);		// 총 5자리로 오른쪽부터 채워짐 : 출력결과 --> |  123|
	printf("|%-5d|\n", 123);	// 총 5자리로 왼쪽부터 채워짐 : 출력결과 --> |123  |
	printf("|%05d|\n", 123);	// 총 5자리로 오른쪽부터 채워지고, 공백은 0으로 채워짐 : 출력결과 --> |00123|
	printf("|%6.1f|\n", 123.45);	// 총 6자리(소수점 포함)로 채워지고, 소수점 이하는 1자리만 출력됨 : 출력결과 --> | 123.5|
	printf("|%07.2f|\n", 123.45);	// 총 7자리(소수점 포함)로 채워지고, 공백은 0으로 채워지고, 소수점 이하는 2자리만 출력됨 : 출력결과 --> |0123.45|

	/* scanf() 표준입력함수 예제 */
	int jsu1, jsu2;
	float ssu1, ssu2;
	printf("\n정수를 2번 입력하세요\n");
	scanf("%d %d", &jsu1, &jsu2);
	printf("\n실수를 2번 입력하세요\n");
	scanf("%f %f", &ssu1, &ssu2);
	printf("\n정수는 %d %d\n", jsu1, jsu2);
	printf("\n실수는 %f %f\n", ssu1, ssu2);

	/* getchar() 문자 하나만 입력받는 함수 예제 */
	char a;
	printf("문자 하나를 입력하세요\n");
	a = getchar();
	printf("a=%c\n", a);

	/* putchar() 문자 하나만 출력하는 함수 예제 */
	char var = 'A';
	putchar(var);		// 출력결과 --> A
	putchar(var + 1);	// 출력결과 --> B
	putchar('\n');		// 출력결과 --> escape 줄바꿈 new line
	putchar('K');		// 출력결과 --> K
	putchar('K' + 2);	// 출력결과 --> M
	putchar('\007');	// 출력결과 --> \007 == \a --> 경고음 삑 소리남

	/* gets() 문자열을 입력받는 함수 예제 */
	char s[50];
	printf("\ngets()에 문자열 입력?\n");
	gets(s);										// 띄어쓰기 포함된 문자열을 입력하면 문자열 전체가 저장됨
	printf("gets()로 문자열 입력 = %s\n", s);
	printf("\nscanf()에 문자열 입력?\n");
	scanf("%s", s);									// 띄어쓰기 포함된 문자열을 입력하면 첫번째 단어만 저장됨. scanf는 띄어쓰기를 데이터를 여러개로 구분하는 것으로 인식함. 변수에 & 생략했으나 오류발생하지 않음.
	printf("scanf()로 문자열 입력 = %s\n", s);

	/* puts() 문자열을 출력하는 함수 예제 */
	char s1[] = "Computer";
	char s2[] = "Science";
	puts(s1);		// 자동 줄바꿈됨 : 출력결과 --> Computer
	puts(s2);		// 자동 줄바꿈됨 : 출력결과 --> Science
	printf("%s", s1);	// 자동 줄바꿈 안됨
	printf("%s\n", s2);	// 문자열 연결 출력됨 : 출력결과 --> ComputerScience

	/* 산술연산자 예제 - 이항연산자 */
	int x, y;
	x = 10;
	y = 3;
	printf("x=%d, y=%d\n", x, y);	// 출력결과 --> x=10, y=3
	printf("x+y=%d\n", x + y);	// 출력결과 --> x+y=13
	printf("x/y=%d\n", x / y);	// 출력결과 --> x/y=3
	printf("x%%y=%d\n", x % y);	// 출력결과 --> x%y=1
	printf("y%%x=%d\n", y % x);	// 출력결과 --> y%x=3

	/* 산술연산자 예제 - 단항연산자 */
	int x1 = 5, a1, b1;
	a1 = ++x1 * x1--;				// 수행순서 1. ++x1 --> 2. ++x1*x1 --> 3. x1--
	b1 = x1 * 10;
	printf("a1=%d b1=%d x1=%d\n", a1, b1, x1);	// 출력결과 --> a1=36 b1=50 x1=5

	/* 관계연산자 예제 */
	int a2 = 4, b2, c2, d2;
	b2 = a2 > 2;			// 참
	printf("b2=%d\n", b2);		// 출력결과 --> b2=1
	c2 = a2 < 2;			// 거짓
	printf("c2=%d\n", c2);		// 출력결과 --> c2=0
	d2 = a2 == 4;			// 참
	printf("d2=%d\n", d2);		// 출력결과 --> d2=1

	/* 논리연산자 예제 */
	int a3 = 4, b3 = 7, c3, d3, e3;
	c3 = a3 > 2 && b3 <= 7;	// 논리곱 && : 참 && 참 == 참
	printf("c3=%d\n", c3);		// 출력결과 --> c3=1
	d3 = a3 < 2 || b3 <= 7;	// 논리합 || : 거짓 || 참 == 참
	printf("d3=%d\n", d3);		// 출력결과 --> d3=1
	e3 = !a3;			// 논리부정 ! : !참 == 거짓
	printf("e3=%d\n", e3);		// 출력결과 --> e3=0

	/* 대입연산자 예제 */
	int a4;
	a4 = 5;				// a4에 5를 대입
	printf("a4 = 5 --> %d\n", a4);	// 출력결과 --> a4 = 5 --> 5
	a4 += 5;			// a4 = a4 + 5 : a4에 5를 더한 후 결과를 a4에 대입
	printf("a4 += 5 --> %d\n", a4);	// 출력결과 --> a4 += 5 --> 10
	a4 -= 5;			// a4 = a4 - 5 : a4에 5를 뺀 후 결과를 a4에 대입
	printf("a4 -= 5 --> %d\n", a4);	// 출력결과 --> a4 -= 5 --> 5
	a4 *= 5;			// a4 = a4 * 5 : a4에 5를 곱한 후 결과를 a4에 대입
	printf("a4 *= 5 --> %d\n", a4);	// 출력결과 --> a4 *= 5 --> 25
	a4 /= 5;			// a4 = a4 / 5 : a4에 5를 나눈 후 결과를 a4에 대입
	printf("a4 /= 5 --> %d\n", a4);	// 출력결과 --> a4 /= 5 --> 5
	a4 %= 3;			// a4 = a4 % 3 : a4에 3를 나눈 후 그 나머지를 a4에 대입
	printf("a4 %%= 3 --> %d\n", a4);// 출력결과 --> a4 %= 3 --> 2
	a4 &= 55;			// a4 = a4 & 55 : a4와 55에 대한 bit단위의 AND연산을 한 후 결과를 a4에 대입
	printf("a4 &= 55 --> %d\n", a4);// 출력결과 --> a4 &= 55 --> 2
	a4 |= 5;			// a4 = a4 | 5 : a4와 5에 대해 bit단위의 OR연산을 한 후 결과를 a4에 대입
	printf("a4 |= 5 --> %d\n", a4);	// 출력결과 --> a4 |= 5 --> 7
	a4 ^= 5;			// a4 = a4 ^ 5 : a4와 5에 대해 bit단위의 XOR연산을 한 후 결과를 a4에 대입
	printf("a4 ^= 5 --> %d\n", a4);	// 출력결과 --> a4 ^= 5 --> 2
	a4 <<= 5;			// a4 = a4 << 5 : a4의 값을 5bit 좌로 이동 후 결과를 a4에 대입
	printf("a4 <<= 5 --> %d\n", a4);// 출력결과 --> a4 <<= 5 --> 64
	a4 >>= 5;			// a4 = a4 >> 5 : a4의 값을 5bit 우로 이동 후 결과를 a4에 대입
	printf("a4 >>= 5 --> %d\n", a4);// 출력결과 --> a4 >>= 5 --> 2
	int a5 = 10, b5 = 3, c5 = 11;
	a5 *= (b5 - 1);					// a5 = a5 * (b5 - 1)
	b5 /= 1 + 1;					// b5 = b5 / (1 + 1)
	c5 += 2;					// c5 = c5 + 2
	printf("a5=%d b5=%d c5=%d\n", a5, b5, c5);	// 출력결과 --> a5=20 b5=1 c5=13

	/* 조건연산자 예제 */
	int a6 = 10, b6;
	b6 = (a6 > 15) ? (a6 + 1) : (a6 - 1);	// 조건을 만족하지 않으므로 (a6 - 1)을 수행
	printf("b6=%d\n", b6);			// 출력결과 --> b6=9

	/* 비트연산자 예제 */
	printf("x의 비트 == 10110011\n");
	printf("y의 비트 == 01001001 인 경우\n");
	printf("x&y 결과 == 00000001 (두 비트가 모두 1(참)인 경우만 1(참). 나머지는 0(거짓))\n");
	printf("x|y 결과 == 11111011 (두 비트 중 하나라도 1(참)인 경우만 1(참). 나머지는 0(거짓))\n");
	printf("x^y 결과 == 11111010 (두 비트가 서로 다른 경우 경우만 1(참). 나머지는 0(거짓))\n");
	printf("~x  결과 == 01001100 (1(참)과 0(거짓)을 반대로 변경)\n");
	printf("x<<2 결과 == 11001100 (비트를 왼쪽으로 2비트 이동. 빈공간에는 00을 채움)\n");
	printf("x>>2 결과 == 00101100 (비트를 오른쪽으로 2비트 이동. 빈공간에는 00을 채움)\n");

	/* 기타연산자 예제 - sizeof(자료형 또는 수식 또는 변수 또는 상수) 
	   : 지정한 자료형, 수식, 변수, 상수의 기억공간의 크기(byte)를 구함 */
	float a7 = 3.14;
	printf("int형의 크기는=%d바이트\n", sizeof(int));		// 출력결과 --> int형의 크기는=4바이트
	printf("float형 변수 a7의 크기는=%d바이트\n", sizeof(a7));	// 출력결과 --> float형 변수 a7의 크기는=4바이트

	/* 기타연산자 예제 - cast(형변환) - (형명칭)자료 
	   : 지정한 자료형을 다른 자료형으로 강제적으로 바꿈 */
	int a8 = 3, b8 = 4;
	double c8;
	c8 = (double)a8 / b8;			// int형인 a8을 double형으로 강제 형변환
	printf("나눗셈 결과: %f\n", c8);	// 출력결과 --> 나눗셈 결과: 0.750000

	/* 기타연산자 예제 - & : 주소 연산자로서 피 연산자의 주소를 나타냄 */
	/* 기타연산자 예제 - * : 내용 연산자로서 피 연산자의 내용을 가져옴 */

	/* 연산자 우선순위 예제 */
	int a9, b9, c9;
	a9 = 10;
	b9 = 20;
	c9 = 30;
	printf("a9+b9*c9=%d\n", a9 + b9 * c9);					// a9+(b9*c9) : 출력결과 --> a9+b9*c9=610
	printf("a9=b9+=2*c9 --> a9=%d\n", a9 = b9 += 2 * c9);			// b9+=2*c9 먼저 계산되고 a9=b9가 계산됨 : 출력결과 --> a9=b9+=2*c9 --> a9=80
	printf("a9=(b9>c9)?b9:c9 --> a9=%d\n", a9 = (b9 > c9) ? b9 : c9);	// 출력결과 --> a9=(b9>c9)?b9:c9 --> a9=80
	printf("a9/b9*c9=%d\n", a9 / b9 * c9);					// 출력결과 --> a9/b9*c9=30
	printf("a9*=b9=c9+5 --> a9=%d\n", a9 *= b9 = c9 + 5);			// a9=(a9*(b9=(c9+5))) : c9+5가 b9에 저장되고, a9*b9가 a9에 저장됨 : 출력결과 --> a9*=b9=c9+5 --> a9=2800
}
```
   
<br />
<cite>출처: 한국방송통신대학교 컴퓨터과학과</cite>
